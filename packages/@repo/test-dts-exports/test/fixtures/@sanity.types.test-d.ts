// Auto-generated by running `pnpm generate:dts-exports`
// If deleting the exports, for example, then please use this command to regenerate the tests
// If you need to investigate where new imports are coming from run `TEST_DTS_EXPORTS_DIAGNOSTICS=full pnpm generate:dts-exports`

import {describe, expectTypeOf, test} from 'vitest'
import type {
  ArrayActionName,
  ArrayDefinition,
  ArrayFieldProps,
  ArrayInputCopyEvent,
  ArrayInputFunctionsProps,
  ArrayInputInsertEvent,
  ArrayInputMoveItemEvent,
  ArrayItemError,
  ArrayOfEntry,
  ArrayOfObjectsComponents,
  ArrayOfObjectsFormNode,
  ArrayOfObjectsInputProps,
  ArrayOfObjectsItemMember,
  ArrayOfObjectsMember,
  ArrayOfPrimitivesComponents,
  ArrayOfPrimitivesElementType,
  ArrayOfPrimitivesFieldProps,
  ArrayOfPrimitivesFormNode,
  ArrayOfPrimitivesInputProps,
  ArrayOfPrimitivesItemMember,
  ArrayOfPrimitivesMember,
  ArrayOfType,
  ArrayOptions,
  ArrayRule,
  ArraySchemaType,
  ArraySchemaTypeOf,
  Asset,
  AssetFromSource,
  AssetMetadataType,
  AssetSchemaTypeOptions,
  AssetSource,
  AssetSourceComponentProps,
  AssetSourceSpec,
  AssetSourceUploader,
  AssetSourceUploaderClass,
  AssetSourceUploadEvent,
  AssetSourceUploadEventAbort,
  AssetSourceUploadEventAllComplete,
  AssetSourceUploadEventError,
  AssetSourceUploadEventProgress,
  AssetSourceUploadEventStatus,
  AssetSourceUploadFile,
  AssetSourceUploadSubscriber,
  AutocompleteString,
  BaseFieldProps,
  BaseFormNode,
  BaseInputProps,
  BaseItemProps,
  BaseSchemaDefinition,
  BaseSchemaType,
  BaseSchemaTypeOptions,
  BlockAnnotationDefinition,
  BlockAnnotationProps,
  BlockChildrenObjectField,
  BlockDecoratorDefinition,
  BlockDecoratorProps,
  BlockDefinition,
  BlockListDefinition,
  BlockListItemProps,
  BlockListObjectField,
  BlockMarksDefinition,
  BlockOptions,
  BlockProps,
  BlockRule,
  BlockSchemaType,
  BlockStyleDefinition,
  BlockStyleObjectField,
  BlockStyleProps,
  BooleanComponents,
  BooleanDefinition,
  BooleanFieldProps,
  BooleanFormNode,
  BooleanInputProps,
  BooleanOptions,
  BooleanRule,
  BooleanSchemaType,
  CanvasAppOptions,
  CollapseOptions,
  ComplexElementProps,
  ConditionalIndexAccess,
  ConditionalProperty,
  ConditionalPropertyCallback,
  ConditionalPropertyCallbackContext,
  CreateIfNotExistsMutation,
  CreateMutation,
  CreateOrReplaceMutation,
  CreateSquashedMutation,
  CrossDatasetReferenceComponents,
  CrossDatasetReferenceDefinition,
  CrossDatasetReferenceFilterResolver,
  CrossDatasetReferenceFilterSearchOptions,
  CrossDatasetReferenceSchemaType,
  CrossDatasetReferenceValue,
  CrossDatasetType,
  CurrentUser,
  CustomValidator,
  CustomValidatorResult,
  DateComponents,
  DateDefinition,
  DateOptions,
  DateRule,
  DatetimeComponents,
  DatetimeDefinition,
  DatetimeOptions,
  DatetimeRule,
  defineArrayMember,
  DefineArrayMemberBase,
  defineAssetAspect,
  defineField,
  DefineSchemaBase,
  DefineSchemaOptions,
  DefineSchemaType,
  defineType,
  DeleteMutation,
  DeprecatedProperty,
  DeprecatedSchemaType,
  DeprecationConfiguration,
  DocumentComponents,
  DocumentDefinition,
  DocumentFieldAction,
  DocumentFieldActionDivider,
  DocumentFieldActionGroup,
  DocumentFieldActionHook,
  DocumentFieldActionItem,
  DocumentFieldActionNode,
  DocumentFieldActionProps,
  DocumentFieldActionStatus,
  DocumentFieldActionTone,
  DocumentOptions,
  DocumentRule,
  DuplicateKeysError,
  EmailComponents,
  EmailDefinition,
  EmailOptions,
  EmailRule,
  EmptyProps,
  EnumListProps,
  FieldCommentsProps,
  FieldDefinition,
  FieldDefinitionBase,
  FieldError,
  FieldGroup,
  FieldGroupDefinition,
  FieldMember,
  FieldProps,
  FieldReference,
  FieldRules,
  Fieldset,
  FieldsetDefinition,
  FieldSetMember,
  FieldsetState,
  File,
  FileAsset,
  FileComponents,
  FileDefinition,
  FileLike,
  FileOptions,
  FileRule,
  FileSchemaType,
  FileValue,
  FormDiffMatchPatch,
  FormFieldGroup,
  FormInsertPatch,
  FormInsertPatchPosition,
  FormNodePresence,
  FormNodeValidation,
  FormPatch,
  FormPatchBase,
  FormPatchJSONValue,
  FormPatchOrigin,
  FormSetIfMissingPatch,
  FormSetPatch,
  FormUnsetPatch,
  GeneralDocumentListLayoutKey,
  GeneralPreviewLayoutKey,
  GeopointComponents,
  GeopointDefinition,
  GeopointOptions,
  GeopointRule,
  GeopointValue,
  GlobalDocumentReferenceDefinition,
  GlobalDocumentReferenceFilterResolver,
  GlobalDocumentReferenceFilterSearchOptions,
  GlobalDocumentReferenceSchemaType,
  GlobalDocumentReferenceType,
  GlobalDocumentReferenceValue,
  HotspotOptions,
  HotspotPreview,
  I18nTextRecord,
  I18nTitledListValue,
  Image,
  ImageAsset,
  ImageComponents,
  ImageCrop,
  ImageDefinition,
  ImageDimensions,
  ImageHotspot,
  ImageMetadata,
  ImageMetadataType,
  ImageOptions,
  ImagePalette,
  ImageRule,
  ImageSchemaType,
  ImageSwatch,
  ImageUrlAutoMode,
  ImageUrlCropMode,
  ImageUrlFitMode,
  ImageUrlFormat,
  ImageUrlOrientation,
  ImageUrlParams,
  ImageValue,
  IncompatibleTypeError,
  IndexTuple,
  InitialValueProperty,
  InitialValueResolver,
  InitialValueResolverContext,
  InlineFieldDefinition,
  InputProps,
  InsertMenuOptions,
  InsertPatch,
  IntrinsicArrayOfBase,
  IntrinsicArrayOfDefinition,
  IntrinsicBase,
  IntrinsicDefinitions,
  IntrinsicTypeName,
  InvalidItemTypeError,
  isArrayOfBlocksSchemaType,
  isArrayOfObjectsSchemaType,
  isArrayOfPrimitivesSchemaType,
  isArraySchemaType,
  isAssetAspect,
  isBlockChildrenObjectField,
  isBlockListObjectField,
  isBlockSchemaType,
  isBlockStyleObjectField,
  isBooleanSchemaType,
  isCreateIfNotExistsMutation,
  isCreateMutation,
  isCreateOrReplaceMutation,
  isCreateSquashedMutation,
  isCrossDatasetReference,
  isCrossDatasetReferenceSchemaType,
  isDateTimeSchemaType,
  isDeleteMutation,
  isDeprecatedSchemaType,
  isDeprecationConfiguration,
  isDocumentSchemaType,
  isFileSchemaType,
  isGlobalDocumentReference,
  isImage,
  isImageSchemaType,
  isIndexSegment,
  isIndexTuple,
  isKeyedObject,
  isKeySegment,
  isNumberSchemaType,
  isObjectSchemaType,
  isPatchMutation,
  isPortableTextListBlock,
  isPortableTextSpan,
  isPortableTextTextBlock,
  isPrimitiveSchemaType,
  isReference,
  isReferenceSchemaType,
  isSanityDocument,
  isSearchStrategy,
  isSlug,
  isSpanSchemaType,
  isStringSchemaType,
  isTitledListValue,
  isTypedObject,
  isValidationError,
  isValidationErrorMarker,
  isValidationInfo,
  isValidationInfoMarker,
  isValidationWarning,
  isValidationWarningMarker,
  ItemProps,
  KeyedObject,
  KeyedSegment,
  Locale,
  LocaleSource,
  LocaleWeekInfo,
  LocalizedValidationMessages,
  MaybeAllowUnknownProps,
  MaybePreview,
  MEDIA_LIBRARY_ASSET_ASPECT_TYPE_NAME,
  MediaAssetTypes,
  MediaLibraryAssetAspectDefinition,
  MediaLibraryAssetAspectDocument,
  MediaLibraryAssetAspectSupportedFieldDefinitions,
  MediaLibraryAssetAspectTypeName,
  MediaLibraryAssetType,
  MediaLibraryFilter,
  MediaLibraryOptions,
  MediaValidationValue,
  MediaValidator,
  MendozaEffectPair,
  MendozaPatch,
  MissingKeysError,
  MixedArrayError,
  MultiFieldSet,
  MultipleMutationResult,
  Mutation,
  MutationOperationName,
  MutationSelection,
  NarrowPreview,
  NumberComponents,
  NumberDefinition,
  NumberFieldProps,
  NumberFormNode,
  NumberInputProps,
  NumberOptions,
  NumberRule,
  NumberSchemaType,
  ObjectArrayFormNode,
  ObjectComponents,
  ObjectDefinition,
  ObjectField,
  ObjectFieldProps,
  ObjectFieldType,
  ObjectFormNode,
  ObjectInputProps,
  ObjectItem,
  ObjectItemProps,
  ObjectMember,
  ObjectOptions,
  ObjectRule,
  ObjectSchemaType,
  ObjectSchemaTypeWithOptions,
  OnPathFocusPayload,
  PatchArg,
  PatchEventInterface,
  PatchMutation,
  PatchMutationOperation,
  PatchOperations,
  Path,
  PathSegment,
  PortableTextBlock,
  PortableTextChild,
  PortableTextInputProps,
  PortableTextListBlock,
  PortableTextMarker,
  PortableTextObject,
  PortableTextPluginsProps,
  PortableTextPreviewLayoutKey,
  PortableTextSpan,
  PortableTextTextBlock,
  PrepareViewOptions,
  PreviewConfig,
  PreviewLayoutKey,
  PreviewMediaDimensions,
  PreviewProps,
  PreviewValue,
  PrimitiveFieldProps,
  PrimitiveFormNode,
  PrimitiveInputElementProps,
  PrimitiveItemProps,
  Reference,
  ReferenceBaseOptions,
  ReferenceComponents,
  ReferenceDefinition,
  ReferenceFilterOptions,
  ReferenceFilterQueryOptions,
  ReferenceFilterResolver,
  ReferenceFilterResolverContext,
  ReferenceFilterResolverOptions,
  ReferenceFilterSearchOptions,
  ReferenceInputProps,
  ReferenceOptions,
  ReferenceRule,
  ReferenceSchemaType,
  ReferenceTo,
  ReferenceValue,
  RenderAnnotationCallback,
  RenderArrayOfObjectsItemCallback,
  RenderArrayOfPrimitivesItemCallback,
  RenderBlockActionsCallback,
  RenderBlockActionsProps,
  RenderBlockCallback,
  RenderCustomMarkers,
  RenderFieldCallback,
  RenderInputCallback,
  RenderPreviewCallback,
  RenderPreviewCallbackProps,
  Role,
  Rule,
  RuleBuilder,
  RuleClass,
  RuleDef,
  RuleSpec,
  RuleSpecConstraint,
  RuleTypeConstraint,
  SanityCreateOptions,
  SanityDocument,
  SanityDocumentLike,
  Schema,
  SchemaType,
  SchemaTypeDefinition,
  SchemaValidationError,
  SchemaValidationProblem,
  SchemaValidationProblemGroup,
  SchemaValidationProblemPath,
  SchemaValidationValue,
  SchemaValidationWarning,
  SearchConfiguration,
  searchStrategies,
  SearchStrategy,
  SingleFieldSet,
  SingleMutationResult,
  Slug,
  SlugComponents,
  SlugDefinition,
  SlugifierFn,
  SlugIsUniqueValidator,
  SlugOptions,
  SlugParent,
  SlugRule,
  SlugSchemaType,
  SlugSourceContext,
  SlugSourceFn,
  SlugValidationContext,
  SlugValue,
  SortOrdering,
  SortOrderingItem,
  SpanMarksObjectField,
  SpanSchemaType,
  SpanTextObjectField,
  StrictDefinition,
  StringComponents,
  StringDefinition,
  StringFieldProps,
  StringFormNode,
  StringInputProps,
  StringOptions,
  StringRule,
  StringSchemaType,
  SwatchName,
  TextComponents,
  TextDefinition,
  TextOptions,
  TextRule,
  TextSchemaType,
  TFunction,
  TitledListValue,
  TransactionLogEvent,
  TransactionLogEventWithEffects,
  TransactionLogEventWithMutations,
  TransactionLogMutation,
  TypeAliasDefinition,
  TypeAnnotationMismatchError,
  typed,
  TypedObject,
  TypeReference,
  UndeclaredMembersError,
  Uploader,
  UploaderResolver,
  UploadEvent,
  UploadOptions,
  UploadProgressEvent,
  UploadState,
  UriValidationOptions,
  UrlComponents,
  UrlDefinition,
  UrlOptions,
  UrlRule,
  User,
  ValidationBuilder,
  ValidationContext,
  ValidationError,
  ValidationErrorClass,
  ValidationErrorOptions,
  ValidationMarker,
  Validator,
  Validators,
  WeakCrossDatasetReferenceValue,
  WeakGlobalDocumentReferenceValue,
  WeakReference,
  WidenInitialValue,
  WidenValidation,
} from '@sanity/types'

describe('@sanity/types', () => {
  test('ArrayActionName', () => {
    expectTypeOf<ArrayActionName>().not.toBeNever()
  })
  test('ArrayDefinition', () => {
    expectTypeOf<ArrayDefinition>().toBeObject()
  })
  test('ArrayFieldProps', () => {
    expectTypeOf<ArrayFieldProps>().toBeObject()
  })
  test('ArrayInputCopyEvent', () => {
    expectTypeOf<ArrayInputCopyEvent<any>>().toBeObject()
  })
  test('ArrayInputFunctionsProps', () => {
    expectTypeOf<ArrayInputFunctionsProps<any, any>>().toBeObject()
  })
  test('ArrayInputInsertEvent', () => {
    expectTypeOf<ArrayInputInsertEvent<any>>().toBeObject()
  })
  test('ArrayInputMoveItemEvent', () => {
    expectTypeOf<ArrayInputMoveItemEvent>().toBeObject()
  })
  test('ArrayItemError', () => {
    expectTypeOf<ArrayItemError>().toBeObject()
  })
  test('ArrayOfEntry', () => {
    expectTypeOf<ArrayOfEntry<any>>().not.toBeNever()
  })
  test('ArrayOfObjectsComponents', () => {
    expectTypeOf<ArrayOfObjectsComponents>().toBeObject()
  })
  test('ArrayOfObjectsFormNode', () => {
    expectTypeOf<ArrayOfObjectsFormNode<any, any>>().toBeObject()
  })
  test('ArrayOfObjectsInputProps', () => {
    expectTypeOf<ArrayOfObjectsInputProps<any, any>>().toBeObject()
  })
  test('ArrayOfObjectsItemMember', () => {
    expectTypeOf<ArrayOfObjectsItemMember<any>>().toBeObject()
  })
  test('ArrayOfObjectsMember', () => {
    expectTypeOf<ArrayOfObjectsMember>().not.toBeNever()
  })
  test('ArrayOfPrimitivesComponents', () => {
    expectTypeOf<ArrayOfPrimitivesComponents>().toBeObject()
  })
  test('ArrayOfPrimitivesElementType', () => {
    expectTypeOf<ArrayOfPrimitivesElementType<any>>().not.toBeNever()
  })
  test('ArrayOfPrimitivesFieldProps', () => {
    expectTypeOf<ArrayOfPrimitivesFieldProps>().toBeObject()
  })
  test('ArrayOfPrimitivesFormNode', () => {
    expectTypeOf<ArrayOfPrimitivesFormNode<any, any>>().toBeObject()
  })
  test('ArrayOfPrimitivesInputProps', () => {
    expectTypeOf<ArrayOfPrimitivesInputProps<any, any>>().toBeObject()
  })
  test('ArrayOfPrimitivesItemMember', () => {
    expectTypeOf<ArrayOfPrimitivesItemMember<any>>().toBeObject()
  })
  test('ArrayOfPrimitivesMember', () => {
    expectTypeOf<ArrayOfPrimitivesMember>().not.toBeNever()
  })
  test('ArrayOfType', () => {
    expectTypeOf<ArrayOfType<any, any>>().not.toBeNever()
  })
  test('ArrayOptions', () => {
    expectTypeOf<ArrayOptions<any>>().toBeObject()
  })
  test('ArrayRule', () => {
    expectTypeOf<ArrayRule<any>>().toBeObject()
  })
  test('ArraySchemaType', () => {
    expectTypeOf<ArraySchemaType<any>>().toBeObject()
  })
  test('ArraySchemaTypeOf', () => {
    expectTypeOf<ArraySchemaTypeOf<any>>().not.toBeNever()
  })
  test('Asset', () => {
    expectTypeOf<Asset>().toBeObject()
  })
  test('AssetFromSource', () => {
    expectTypeOf<AssetFromSource>().not.toBeNever()
  })
  test('AssetMetadataType', () => {
    expectTypeOf<AssetMetadataType>().not.toBeNever()
  })
  test('AssetSchemaTypeOptions', () => {
    expectTypeOf<AssetSchemaTypeOptions>().toBeObject()
  })
  test('AssetSource', () => {
    expectTypeOf<AssetSource>().toBeObject()
  })
  test('AssetSourceComponentProps', () => {
    expectTypeOf<AssetSourceComponentProps>().toBeObject()
  })
  test('AssetSourceSpec', () => {
    expectTypeOf<AssetSourceSpec>().toBeObject()
  })
  test('AssetSourceUploader', () => {
    expectTypeOf<AssetSourceUploader>().toBeObject()
  })
  test('AssetSourceUploaderClass', () => {
    expectTypeOf<AssetSourceUploaderClass>().not.toBeNever()
  })
  test('AssetSourceUploadEvent', () => {
    expectTypeOf<AssetSourceUploadEvent>().not.toBeNever()
  })
  test('AssetSourceUploadEventAbort', () => {
    expectTypeOf<AssetSourceUploadEventAbort>().not.toBeNever()
  })
  test('AssetSourceUploadEventAllComplete', () => {
    expectTypeOf<AssetSourceUploadEventAllComplete>().not.toBeNever()
  })
  test('AssetSourceUploadEventError', () => {
    expectTypeOf<AssetSourceUploadEventError>().not.toBeNever()
  })
  test('AssetSourceUploadEventProgress', () => {
    expectTypeOf<AssetSourceUploadEventProgress>().not.toBeNever()
  })
  test('AssetSourceUploadEventStatus', () => {
    expectTypeOf<AssetSourceUploadEventStatus>().not.toBeNever()
  })
  test('AssetSourceUploadFile', () => {
    expectTypeOf<AssetSourceUploadFile>().toBeObject()
  })
  test('AssetSourceUploadSubscriber', () => {
    expectTypeOf<AssetSourceUploadSubscriber>().not.toBeNever()
  })
  test('AutocompleteString', () => {
    expectTypeOf<AutocompleteString>().not.toBeNever()
  })
  test('BaseFieldProps', () => {
    expectTypeOf<BaseFieldProps>().toBeObject()
  })
  test('BaseFormNode', () => {
    expectTypeOf<BaseFormNode<any, any>>().toBeObject()
  })
  test('BaseInputProps', () => {
    expectTypeOf<BaseInputProps>().toBeObject()
  })
  test('BaseItemProps', () => {
    expectTypeOf<BaseItemProps<any>>().toBeObject()
  })
  test('BaseSchemaDefinition', () => {
    expectTypeOf<BaseSchemaDefinition>().toBeObject()
  })
  test('BaseSchemaType', () => {
    expectTypeOf<BaseSchemaType>().toBeObject()
  })
  test('BaseSchemaTypeOptions', () => {
    expectTypeOf<BaseSchemaTypeOptions>().toBeObject()
  })
  test('BlockAnnotationDefinition', () => {
    expectTypeOf<BlockAnnotationDefinition>().toBeObject()
  })
  test('BlockAnnotationProps', () => {
    expectTypeOf<BlockAnnotationProps>().toBeObject()
  })
  test('BlockChildrenObjectField', () => {
    expectTypeOf<BlockChildrenObjectField>().not.toBeNever()
  })
  test('BlockDecoratorDefinition', () => {
    expectTypeOf<BlockDecoratorDefinition>().toBeObject()
  })
  test('BlockDecoratorProps', () => {
    expectTypeOf<BlockDecoratorProps>().toBeObject()
  })
  test('BlockDefinition', () => {
    expectTypeOf<BlockDefinition>().toBeObject()
  })
  test('BlockListDefinition', () => {
    expectTypeOf<BlockListDefinition>().toBeObject()
  })
  test('BlockListItemProps', () => {
    expectTypeOf<BlockListItemProps>().toBeObject()
  })
  test('BlockListObjectField', () => {
    expectTypeOf<BlockListObjectField>().not.toBeNever()
  })
  test('BlockMarksDefinition', () => {
    expectTypeOf<BlockMarksDefinition>().toBeObject()
  })
  test('BlockOptions', () => {
    expectTypeOf<BlockOptions>().toBeObject()
  })
  test('BlockProps', () => {
    expectTypeOf<BlockProps>().toBeObject()
  })
  test('BlockRule', () => {
    expectTypeOf<BlockRule>().toBeObject()
  })
  test('BlockSchemaType', () => {
    expectTypeOf<BlockSchemaType>().toBeObject()
  })
  test('BlockStyleDefinition', () => {
    expectTypeOf<BlockStyleDefinition>().toBeObject()
  })
  test('BlockStyleObjectField', () => {
    expectTypeOf<BlockStyleObjectField>().not.toBeNever()
  })
  test('BlockStyleProps', () => {
    expectTypeOf<BlockStyleProps>().toBeObject()
  })
  test('BooleanComponents', () => {
    expectTypeOf<BooleanComponents>().toBeObject()
  })
  test('BooleanDefinition', () => {
    expectTypeOf<BooleanDefinition>().toBeObject()
  })
  test('BooleanFieldProps', () => {
    expectTypeOf<BooleanFieldProps>().toBeObject()
  })
  test('BooleanFormNode', () => {
    expectTypeOf<BooleanFormNode<any>>().not.toBeNever()
  })
  test('BooleanInputProps', () => {
    expectTypeOf<BooleanInputProps<any>>().toBeObject()
  })
  test('BooleanOptions', () => {
    expectTypeOf<BooleanOptions>().toBeObject()
  })
  test('BooleanRule', () => {
    expectTypeOf<BooleanRule>().toBeObject()
  })
  test('BooleanSchemaType', () => {
    expectTypeOf<BooleanSchemaType>().toBeObject()
  })
  test('CanvasAppOptions', () => {
    expectTypeOf<CanvasAppOptions>().toBeObject()
  })
  test('CollapseOptions', () => {
    expectTypeOf<CollapseOptions>().toBeObject()
  })
  test('ComplexElementProps', () => {
    expectTypeOf<ComplexElementProps>().toBeObject()
  })
  test('ConditionalIndexAccess', () => {
    expectTypeOf<ConditionalIndexAccess<any, any>>().not.toBeNever()
  })
  test('ConditionalProperty', () => {
    expectTypeOf<ConditionalProperty>().not.toBeNever()
  })
  test('ConditionalPropertyCallback', () => {
    expectTypeOf<ConditionalPropertyCallback>().not.toBeNever()
  })
  test('ConditionalPropertyCallbackContext', () => {
    expectTypeOf<ConditionalPropertyCallbackContext>().toBeObject()
  })
  test('CreateIfNotExistsMutation', () => {
    expectTypeOf<CreateIfNotExistsMutation>().toBeObject()
  })
  test('CreateMutation', () => {
    expectTypeOf<CreateMutation>().toBeObject()
  })
  test('CreateOrReplaceMutation', () => {
    expectTypeOf<CreateOrReplaceMutation>().toBeObject()
  })
  test('CreateSquashedMutation', () => {
    expectTypeOf<CreateSquashedMutation>().toBeObject()
  })
  test('CrossDatasetReferenceComponents', () => {
    expectTypeOf<CrossDatasetReferenceComponents>().toBeObject()
  })
  test('CrossDatasetReferenceDefinition', () => {
    expectTypeOf<CrossDatasetReferenceDefinition>().toBeObject()
  })
  test('CrossDatasetReferenceFilterResolver', () => {
    expectTypeOf<CrossDatasetReferenceFilterResolver>().not.toBeNever()
  })
  test('CrossDatasetReferenceFilterSearchOptions', () => {
    expectTypeOf<CrossDatasetReferenceFilterSearchOptions>().not.toBeNever()
  })
  test('CrossDatasetReferenceSchemaType', () => {
    expectTypeOf<CrossDatasetReferenceSchemaType>().toBeObject()
  })
  test('CrossDatasetReferenceValue', () => {
    expectTypeOf<CrossDatasetReferenceValue>().toBeObject()
  })
  test('CrossDatasetType', () => {
    expectTypeOf<CrossDatasetType>().toBeObject()
  })
  test('CurrentUser', () => {
    expectTypeOf<CurrentUser>().toBeObject()
  })
  test('CustomValidator', () => {
    expectTypeOf<CustomValidator<any>>().toBeObject()
  })
  test('CustomValidatorResult', () => {
    expectTypeOf<CustomValidatorResult>().not.toBeNever()
  })
  test('DateComponents', () => {
    expectTypeOf<DateComponents>().toBeObject()
  })
  test('DateDefinition', () => {
    expectTypeOf<DateDefinition>().toBeObject()
  })
  test('DateOptions', () => {
    expectTypeOf<DateOptions>().toBeObject()
  })
  test('DateRule', () => {
    expectTypeOf<DateRule>().toBeObject()
  })
  test('DatetimeComponents', () => {
    expectTypeOf<DatetimeComponents>().toBeObject()
  })
  test('DatetimeDefinition', () => {
    expectTypeOf<DatetimeDefinition>().toBeObject()
  })
  test('DatetimeOptions', () => {
    expectTypeOf<DatetimeOptions>().toBeObject()
  })
  test('DatetimeRule', () => {
    expectTypeOf<DatetimeRule>().toBeObject()
  })
  test('defineArrayMember', () => {
    expectTypeOf<typeof defineArrayMember>().toBeFunction()
  })
  test('DefineArrayMemberBase', () => {
    expectTypeOf<DefineArrayMemberBase<any, any>>().not.toBeNever()
  })
  test('defineAssetAspect', () => {
    expectTypeOf<typeof defineAssetAspect>().toBeFunction()
  })
  test('defineField', () => {
    expectTypeOf<typeof defineField>().toBeFunction()
  })
  test('DefineSchemaBase', () => {
    expectTypeOf<DefineSchemaBase<any, any>>().not.toBeNever()
  })
  test('DefineSchemaOptions', () => {
    expectTypeOf<DefineSchemaOptions<any, any>>().toBeObject()
  })
  test('DefineSchemaType', () => {
    expectTypeOf<DefineSchemaType<any, any>>().not.toBeNever()
  })
  test('defineType', () => {
    expectTypeOf<typeof defineType>().toBeFunction()
  })
  test('DeleteMutation', () => {
    expectTypeOf<DeleteMutation>().toBeObject()
  })
  test('DeprecatedProperty', () => {
    expectTypeOf<DeprecatedProperty>().toBeObject()
  })
  test('DeprecatedSchemaType', () => {
    expectTypeOf<DeprecatedSchemaType<any>>().not.toBeNever()
  })
  test('DeprecationConfiguration', () => {
    expectTypeOf<DeprecationConfiguration>().toBeObject()
  })
  test('DocumentComponents', () => {
    expectTypeOf<DocumentComponents>().toBeObject()
  })
  test('DocumentDefinition', () => {
    expectTypeOf<DocumentDefinition>().toBeObject()
  })
  test('DocumentFieldAction', () => {
    expectTypeOf<DocumentFieldAction>().toBeObject()
  })
  test('DocumentFieldActionDivider', () => {
    expectTypeOf<DocumentFieldActionDivider>().toBeObject()
  })
  test('DocumentFieldActionGroup', () => {
    expectTypeOf<DocumentFieldActionGroup>().toBeObject()
  })
  test('DocumentFieldActionHook', () => {
    expectTypeOf<DocumentFieldActionHook>().toBeObject()
  })
  test('DocumentFieldActionItem', () => {
    expectTypeOf<DocumentFieldActionItem>().toBeObject()
  })
  test('DocumentFieldActionNode', () => {
    expectTypeOf<DocumentFieldActionNode>().not.toBeNever()
  })
  test('DocumentFieldActionProps', () => {
    expectTypeOf<DocumentFieldActionProps>().toBeObject()
  })
  test('DocumentFieldActionStatus', () => {
    expectTypeOf<DocumentFieldActionStatus>().not.toBeNever()
  })
  test('DocumentFieldActionTone', () => {
    expectTypeOf<DocumentFieldActionTone>().not.toBeNever()
  })
  test('DocumentOptions', () => {
    expectTypeOf<DocumentOptions>().toBeObject()
  })
  test('DocumentRule', () => {
    expectTypeOf<DocumentRule>().toBeObject()
  })
  test('DuplicateKeysError', () => {
    expectTypeOf<DuplicateKeysError>().not.toBeNever()
  })
  test('EmailComponents', () => {
    expectTypeOf<EmailComponents>().toBeObject()
  })
  test('EmailDefinition', () => {
    expectTypeOf<EmailDefinition>().toBeObject()
  })
  test('EmailOptions', () => {
    expectTypeOf<EmailOptions>().toBeObject()
  })
  test('EmailRule', () => {
    expectTypeOf<EmailRule>().toBeObject()
  })
  test('EmptyProps', () => {
    expectTypeOf<EmptyProps>().toBeObject()
  })
  test('EnumListProps', () => {
    expectTypeOf<EnumListProps<any>>().toBeObject()
  })
  test('FieldCommentsProps', () => {
    expectTypeOf<FieldCommentsProps>().toBeObject()
  })
  test('FieldDefinition', () => {
    expectTypeOf<FieldDefinition<any, any>>().not.toBeNever()
  })
  test('FieldDefinitionBase', () => {
    expectTypeOf<FieldDefinitionBase>().toBeObject()
  })
  test('FieldError', () => {
    expectTypeOf<FieldError>().toBeObject()
  })
  test('FieldGroup', () => {
    expectTypeOf<FieldGroup>().toBeObject()
  })
  test('FieldGroupDefinition', () => {
    expectTypeOf<FieldGroupDefinition>().not.toBeNever()
  })
  test('FieldMember', () => {
    expectTypeOf<FieldMember<any>>().toBeObject()
  })
  test('FieldProps', () => {
    expectTypeOf<FieldProps>().not.toBeNever()
  })
  test('FieldReference', () => {
    expectTypeOf<FieldReference>().toBeObject()
  })
  test('FieldRules', () => {
    expectTypeOf<FieldRules>().not.toBeNever()
  })
  test('Fieldset', () => {
    expectTypeOf<Fieldset>().not.toBeNever()
  })
  test('FieldsetDefinition', () => {
    expectTypeOf<FieldsetDefinition>().not.toBeNever()
  })
  test('FieldSetMember', () => {
    expectTypeOf<FieldSetMember>().toBeObject()
  })
  test('FieldsetState', () => {
    expectTypeOf<FieldsetState>().toBeObject()
  })
  test('File', () => {
    expectTypeOf<File>().toBeObject()
  })
  test('FileAsset', () => {
    expectTypeOf<FileAsset>().toBeObject()
  })
  test('FileComponents', () => {
    expectTypeOf<FileComponents>().toBeObject()
  })
  test('FileDefinition', () => {
    expectTypeOf<FileDefinition>().toBeObject()
  })
  test('FileLike', () => {
    expectTypeOf<FileLike>().toBeObject()
  })
  test('FileOptions', () => {
    expectTypeOf<FileOptions>().toBeObject()
  })
  test('FileRule', () => {
    expectTypeOf<FileRule>().toBeObject()
  })
  test('FileSchemaType', () => {
    expectTypeOf<FileSchemaType>().toBeObject()
  })
  test('FileValue', () => {
    expectTypeOf<FileValue>().toBeObject()
  })
  test('FormDiffMatchPatch', () => {
    expectTypeOf<FormDiffMatchPatch>().toBeObject()
  })
  test('FormFieldGroup', () => {
    expectTypeOf<FormFieldGroup>().toBeObject()
  })
  test('FormInsertPatch', () => {
    expectTypeOf<FormInsertPatch>().toBeObject()
  })
  test('FormInsertPatchPosition', () => {
    expectTypeOf<FormInsertPatchPosition>().not.toBeNever()
  })
  test('FormNodePresence', () => {
    expectTypeOf<FormNodePresence>().toBeObject()
  })
  test('FormNodeValidation', () => {
    expectTypeOf<FormNodeValidation>().toBeObject()
  })
  test('FormPatch', () => {
    expectTypeOf<FormPatch>().not.toBeNever()
  })
  test('FormPatchBase', () => {
    expectTypeOf<FormPatchBase>().toBeObject()
  })
  test('FormPatchJSONValue', () => {
    expectTypeOf<FormPatchJSONValue>().not.toBeNever()
  })
  test('FormPatchOrigin', () => {
    expectTypeOf<FormPatchOrigin>().not.toBeNever()
  })
  test('FormSetIfMissingPatch', () => {
    expectTypeOf<FormSetIfMissingPatch>().toBeObject()
  })
  test('FormSetPatch', () => {
    expectTypeOf<FormSetPatch>().toBeObject()
  })
  test('FormUnsetPatch', () => {
    expectTypeOf<FormUnsetPatch>().toBeObject()
  })
  test('GeneralDocumentListLayoutKey', () => {
    expectTypeOf<GeneralDocumentListLayoutKey>().not.toBeNever()
  })
  test('GeneralPreviewLayoutKey', () => {
    expectTypeOf<GeneralPreviewLayoutKey>().not.toBeNever()
  })
  test('GeopointComponents', () => {
    expectTypeOf<GeopointComponents>().toBeObject()
  })
  test('GeopointDefinition', () => {
    expectTypeOf<GeopointDefinition>().toBeObject()
  })
  test('GeopointOptions', () => {
    expectTypeOf<GeopointOptions>().toBeObject()
  })
  test('GeopointRule', () => {
    expectTypeOf<GeopointRule>().toBeObject()
  })
  test('GeopointValue', () => {
    expectTypeOf<GeopointValue>().toBeObject()
  })
  test('GlobalDocumentReferenceDefinition', () => {
    expectTypeOf<GlobalDocumentReferenceDefinition>().toBeObject()
  })
  test('GlobalDocumentReferenceFilterResolver', () => {
    expectTypeOf<GlobalDocumentReferenceFilterResolver>().not.toBeNever()
  })
  test('GlobalDocumentReferenceFilterSearchOptions', () => {
    expectTypeOf<GlobalDocumentReferenceFilterSearchOptions>().not.toBeNever()
  })
  test('GlobalDocumentReferenceSchemaType', () => {
    expectTypeOf<GlobalDocumentReferenceSchemaType>().toBeObject()
  })
  test('GlobalDocumentReferenceType', () => {
    expectTypeOf<GlobalDocumentReferenceType>().toBeObject()
  })
  test('GlobalDocumentReferenceValue', () => {
    expectTypeOf<GlobalDocumentReferenceValue>().toBeObject()
  })
  test('HotspotOptions', () => {
    expectTypeOf<HotspotOptions>().toBeObject()
  })
  test('HotspotPreview', () => {
    expectTypeOf<HotspotPreview>().toBeObject()
  })
  test('I18nTextRecord', () => {
    expectTypeOf<I18nTextRecord<any>>().not.toBeNever()
  })
  test('I18nTitledListValue', () => {
    expectTypeOf<I18nTitledListValue<any>>().toBeObject()
  })
  test('Image', () => {
    expectTypeOf<Image>().toBeObject()
  })
  test('ImageAsset', () => {
    expectTypeOf<ImageAsset>().toBeObject()
  })
  test('ImageComponents', () => {
    expectTypeOf<ImageComponents>().toBeObject()
  })
  test('ImageCrop', () => {
    expectTypeOf<ImageCrop>().toBeObject()
  })
  test('ImageDefinition', () => {
    expectTypeOf<ImageDefinition>().toBeObject()
  })
  test('ImageDimensions', () => {
    expectTypeOf<ImageDimensions>().toBeObject()
  })
  test('ImageHotspot', () => {
    expectTypeOf<ImageHotspot>().toBeObject()
  })
  test('ImageMetadata', () => {
    expectTypeOf<ImageMetadata>().toBeObject()
  })
  test('ImageMetadataType', () => {
    expectTypeOf<ImageMetadataType>().not.toBeNever()
  })
  test('ImageOptions', () => {
    expectTypeOf<ImageOptions>().toBeObject()
  })
  test('ImagePalette', () => {
    expectTypeOf<ImagePalette>().toBeObject()
  })
  test('ImageRule', () => {
    expectTypeOf<ImageRule>().toBeObject()
  })
  test('ImageSchemaType', () => {
    expectTypeOf<ImageSchemaType>().toBeObject()
  })
  test('ImageSwatch', () => {
    expectTypeOf<ImageSwatch>().toBeObject()
  })
  test('ImageUrlAutoMode', () => {
    expectTypeOf<ImageUrlAutoMode>().not.toBeNever()
  })
  test('ImageUrlCropMode', () => {
    expectTypeOf<ImageUrlCropMode>().not.toBeNever()
  })
  test('ImageUrlFitMode', () => {
    expectTypeOf<ImageUrlFitMode>().not.toBeNever()
  })
  test('ImageUrlFormat', () => {
    expectTypeOf<ImageUrlFormat>().not.toBeNever()
  })
  test('ImageUrlOrientation', () => {
    expectTypeOf<ImageUrlOrientation>().not.toBeNever()
  })
  test('ImageUrlParams', () => {
    expectTypeOf<ImageUrlParams>().toBeObject()
  })
  test('ImageValue', () => {
    expectTypeOf<ImageValue>().toBeObject()
  })
  test('IncompatibleTypeError', () => {
    expectTypeOf<IncompatibleTypeError>().not.toBeNever()
  })
  test('IndexTuple', () => {
    expectTypeOf<IndexTuple>().not.toBeNever()
  })
  test('InitialValueProperty', () => {
    expectTypeOf<InitialValueProperty<any, any>>().not.toBeNever()
  })
  test('InitialValueResolver', () => {
    expectTypeOf<InitialValueResolver<any, any>>().not.toBeNever()
  })
  test('InitialValueResolverContext', () => {
    expectTypeOf<InitialValueResolverContext>().toBeObject()
  })
  test('InlineFieldDefinition', () => {
    expectTypeOf<InlineFieldDefinition>().not.toBeNever()
  })
  test('InputProps', () => {
    expectTypeOf<InputProps>().not.toBeNever()
  })
  test('InsertMenuOptions', () => {
    expectTypeOf<InsertMenuOptions>().toBeObject()
  })
  test('InsertPatch', () => {
    expectTypeOf<InsertPatch>().not.toBeNever()
  })
  test('IntrinsicArrayOfBase', () => {
    expectTypeOf<IntrinsicArrayOfBase>().not.toBeNever()
  })
  test('IntrinsicArrayOfDefinition', () => {
    expectTypeOf<IntrinsicArrayOfDefinition>().not.toBeNever()
  })
  test('IntrinsicBase', () => {
    expectTypeOf<IntrinsicBase>().not.toBeNever()
  })
  test('IntrinsicDefinitions', () => {
    expectTypeOf<IntrinsicDefinitions>().toBeObject()
  })
  test('IntrinsicTypeName', () => {
    expectTypeOf<IntrinsicTypeName>().not.toBeNever()
  })
  test('InvalidItemTypeError', () => {
    expectTypeOf<InvalidItemTypeError>().not.toBeNever()
  })
  test('isArrayOfBlocksSchemaType', () => {
    expectTypeOf<typeof isArrayOfBlocksSchemaType>().toBeFunction()
  })
  test('isArrayOfObjectsSchemaType', () => {
    expectTypeOf<typeof isArrayOfObjectsSchemaType>().toBeFunction()
  })
  test('isArrayOfPrimitivesSchemaType', () => {
    expectTypeOf<typeof isArrayOfPrimitivesSchemaType>().toBeFunction()
  })
  test('isArraySchemaType', () => {
    expectTypeOf<typeof isArraySchemaType>().toBeFunction()
  })
  test('isAssetAspect', () => {
    expectTypeOf<typeof isAssetAspect>().toBeFunction()
  })
  test('isBlockChildrenObjectField', () => {
    expectTypeOf<typeof isBlockChildrenObjectField>().toBeFunction()
  })
  test('isBlockListObjectField', () => {
    expectTypeOf<typeof isBlockListObjectField>().toBeFunction()
  })
  test('isBlockSchemaType', () => {
    expectTypeOf<typeof isBlockSchemaType>().toBeFunction()
  })
  test('isBlockStyleObjectField', () => {
    expectTypeOf<typeof isBlockStyleObjectField>().toBeFunction()
  })
  test('isBooleanSchemaType', () => {
    expectTypeOf<typeof isBooleanSchemaType>().toBeFunction()
  })
  test('isCreateIfNotExistsMutation', () => {
    expectTypeOf<typeof isCreateIfNotExistsMutation>().toBeFunction()
  })
  test('isCreateMutation', () => {
    expectTypeOf<typeof isCreateMutation>().toBeFunction()
  })
  test('isCreateOrReplaceMutation', () => {
    expectTypeOf<typeof isCreateOrReplaceMutation>().toBeFunction()
  })
  test('isCreateSquashedMutation', () => {
    expectTypeOf<typeof isCreateSquashedMutation>().toBeFunction()
  })
  test('isCrossDatasetReference', () => {
    expectTypeOf<typeof isCrossDatasetReference>().toBeFunction()
  })
  test('isCrossDatasetReferenceSchemaType', () => {
    expectTypeOf<typeof isCrossDatasetReferenceSchemaType>().toBeFunction()
  })
  test('isDateTimeSchemaType', () => {
    expectTypeOf<typeof isDateTimeSchemaType>().toBeFunction()
  })
  test('isDeleteMutation', () => {
    expectTypeOf<typeof isDeleteMutation>().toBeFunction()
  })
  test('isDeprecatedSchemaType', () => {
    expectTypeOf<typeof isDeprecatedSchemaType>().toBeFunction()
  })
  test('isDeprecationConfiguration', () => {
    expectTypeOf<typeof isDeprecationConfiguration>().toBeFunction()
  })
  test('isDocumentSchemaType', () => {
    expectTypeOf<typeof isDocumentSchemaType>().toBeFunction()
  })
  test('isFileSchemaType', () => {
    expectTypeOf<typeof isFileSchemaType>().toBeFunction()
  })
  test('isGlobalDocumentReference', () => {
    expectTypeOf<typeof isGlobalDocumentReference>().toBeFunction()
  })
  test('isImage', () => {
    expectTypeOf<typeof isImage>().toBeFunction()
  })
  test('isImageSchemaType', () => {
    expectTypeOf<typeof isImageSchemaType>().toBeFunction()
  })
  test('isIndexSegment', () => {
    expectTypeOf<typeof isIndexSegment>().toBeFunction()
  })
  test('isIndexTuple', () => {
    expectTypeOf<typeof isIndexTuple>().toBeFunction()
  })
  test('isKeyedObject', () => {
    expectTypeOf<typeof isKeyedObject>().toBeFunction()
  })
  test('isKeySegment', () => {
    expectTypeOf<typeof isKeySegment>().toBeFunction()
  })
  test('isNumberSchemaType', () => {
    expectTypeOf<typeof isNumberSchemaType>().toBeFunction()
  })
  test('isObjectSchemaType', () => {
    expectTypeOf<typeof isObjectSchemaType>().toBeFunction()
  })
  test('isPatchMutation', () => {
    expectTypeOf<typeof isPatchMutation>().toBeFunction()
  })
  test('isPortableTextListBlock', () => {
    expectTypeOf<typeof isPortableTextListBlock>().toBeFunction()
  })
  test('isPortableTextSpan', () => {
    expectTypeOf<typeof isPortableTextSpan>().toBeFunction()
  })
  test('isPortableTextTextBlock', () => {
    expectTypeOf<typeof isPortableTextTextBlock>().toBeFunction()
  })
  test('isPrimitiveSchemaType', () => {
    expectTypeOf<typeof isPrimitiveSchemaType>().toBeFunction()
  })
  test('isReference', () => {
    expectTypeOf<typeof isReference>().toBeFunction()
  })
  test('isReferenceSchemaType', () => {
    expectTypeOf<typeof isReferenceSchemaType>().toBeFunction()
  })
  test('isSanityDocument', () => {
    expectTypeOf<typeof isSanityDocument>().toBeFunction()
  })
  test('isSearchStrategy', () => {
    expectTypeOf<typeof isSearchStrategy>().toBeFunction()
  })
  test('isSlug', () => {
    expectTypeOf<typeof isSlug>().toBeFunction()
  })
  test('isSpanSchemaType', () => {
    expectTypeOf<typeof isSpanSchemaType>().toBeFunction()
  })
  test('isStringSchemaType', () => {
    expectTypeOf<typeof isStringSchemaType>().toBeFunction()
  })
  test('isTitledListValue', () => {
    expectTypeOf<typeof isTitledListValue>().toBeFunction()
  })
  test('isTypedObject', () => {
    expectTypeOf<typeof isTypedObject>().toBeFunction()
  })
  test('isValidationError', () => {
    expectTypeOf<typeof isValidationError>().toBeFunction()
  })
  test('isValidationErrorMarker', () => {
    expectTypeOf<typeof isValidationErrorMarker>().toBeFunction()
  })
  test('isValidationInfo', () => {
    expectTypeOf<typeof isValidationInfo>().toBeFunction()
  })
  test('isValidationInfoMarker', () => {
    expectTypeOf<typeof isValidationInfoMarker>().toBeFunction()
  })
  test('isValidationWarning', () => {
    expectTypeOf<typeof isValidationWarning>().toBeFunction()
  })
  test('isValidationWarningMarker', () => {
    expectTypeOf<typeof isValidationWarningMarker>().toBeFunction()
  })
  test('ItemProps', () => {
    expectTypeOf<ItemProps>().not.toBeNever()
  })
  test('KeyedObject', () => {
    expectTypeOf<KeyedObject>().toBeObject()
  })
  test('KeyedSegment', () => {
    expectTypeOf<KeyedSegment>().not.toBeNever()
  })
  test('Locale', () => {
    expectTypeOf<Locale>().toBeObject()
  })
  test('LocaleSource', () => {
    expectTypeOf<LocaleSource>().toBeObject()
  })
  test('LocaleWeekInfo', () => {
    expectTypeOf<LocaleWeekInfo>().toBeObject()
  })
  test('LocalizedValidationMessages', () => {
    expectTypeOf<LocalizedValidationMessages>().toBeObject()
  })
  test('MaybeAllowUnknownProps', () => {
    expectTypeOf<MaybeAllowUnknownProps<any>>().not.toBeNever()
  })
  test('MaybePreview', () => {
    expectTypeOf<MaybePreview<any, any>>().not.toBeNever()
  })
  test('MEDIA_LIBRARY_ASSET_ASPECT_TYPE_NAME', () => {
    expectTypeOf<typeof MEDIA_LIBRARY_ASSET_ASPECT_TYPE_NAME>().not.toBeNever()
  })
  test('MediaAssetTypes', () => {
    expectTypeOf<MediaAssetTypes>().not.toBeNever()
  })
  test('MediaLibraryAssetAspectDefinition', () => {
    expectTypeOf<MediaLibraryAssetAspectDefinition>().not.toBeNever()
  })
  test('MediaLibraryAssetAspectDocument', () => {
    expectTypeOf<MediaLibraryAssetAspectDocument>().toBeObject()
  })
  test('MediaLibraryAssetAspectSupportedFieldDefinitions', () => {
    expectTypeOf<MediaLibraryAssetAspectSupportedFieldDefinitions>().not.toBeNever()
  })
  test('MediaLibraryAssetAspectTypeName', () => {
    expectTypeOf<MediaLibraryAssetAspectTypeName>().not.toBeNever()
  })
  test('MediaLibraryAssetType', () => {
    expectTypeOf<MediaLibraryAssetType>().not.toBeNever()
  })
  test('MediaLibraryFilter', () => {
    expectTypeOf<MediaLibraryFilter>().toBeObject()
  })
  test('MediaLibraryOptions', () => {
    expectTypeOf<MediaLibraryOptions>().toBeObject()
  })
  test('MediaValidationValue', () => {
    expectTypeOf<MediaValidationValue<any>>().toBeObject()
  })
  test('MediaValidator', () => {
    expectTypeOf<MediaValidator<any>>().toBeObject()
  })
  test('MendozaEffectPair', () => {
    expectTypeOf<MendozaEffectPair>().toBeObject()
  })
  test('MendozaPatch', () => {
    expectTypeOf<MendozaPatch>().not.toBeNever()
  })
  test('MissingKeysError', () => {
    expectTypeOf<MissingKeysError>().not.toBeNever()
  })
  test('MixedArrayError', () => {
    expectTypeOf<MixedArrayError>().not.toBeNever()
  })
  test('MultiFieldSet', () => {
    expectTypeOf<MultiFieldSet>().toBeObject()
  })
  test('MultipleMutationResult', () => {
    expectTypeOf<MultipleMutationResult>().toBeObject()
  })
  test('Mutation', () => {
    expectTypeOf<Mutation>().not.toBeNever()
  })
  test('MutationOperationName', () => {
    expectTypeOf<MutationOperationName>().not.toBeNever()
  })
  test('MutationSelection', () => {
    expectTypeOf<MutationSelection>().not.toBeNever()
  })
  test('NarrowPreview', () => {
    expectTypeOf<NarrowPreview<any, any, any, any>>().not.toBeNever()
  })
  test('NumberComponents', () => {
    expectTypeOf<NumberComponents>().toBeObject()
  })
  test('NumberDefinition', () => {
    expectTypeOf<NumberDefinition>().toBeObject()
  })
  test('NumberFieldProps', () => {
    expectTypeOf<NumberFieldProps>().toBeObject()
  })
  test('NumberFormNode', () => {
    expectTypeOf<NumberFormNode<any>>().not.toBeNever()
  })
  test('NumberInputProps', () => {
    expectTypeOf<NumberInputProps<any>>().toBeObject()
  })
  test('NumberOptions', () => {
    expectTypeOf<NumberOptions>().toBeObject()
  })
  test('NumberRule', () => {
    expectTypeOf<NumberRule>().toBeObject()
  })
  test('NumberSchemaType', () => {
    expectTypeOf<NumberSchemaType>().toBeObject()
  })
  test('ObjectArrayFormNode', () => {
    expectTypeOf<ObjectArrayFormNode<any, any>>().toBeObject()
  })
  test('ObjectComponents', () => {
    expectTypeOf<ObjectComponents>().toBeObject()
  })
  test('ObjectDefinition', () => {
    expectTypeOf<ObjectDefinition>().toBeObject()
  })
  test('ObjectField', () => {
    expectTypeOf<ObjectField<any>>().toBeObject()
  })
  test('ObjectFieldProps', () => {
    expectTypeOf<ObjectFieldProps<any>>().toBeObject()
  })
  test('ObjectFieldType', () => {
    expectTypeOf<ObjectFieldType<any>>().not.toBeNever()
  })
  test('ObjectFormNode', () => {
    expectTypeOf<ObjectFormNode<any, any>>().toBeObject()
  })
  test('ObjectInputProps', () => {
    expectTypeOf<ObjectInputProps<any, any>>().toBeObject()
  })
  test('ObjectItem', () => {
    expectTypeOf<ObjectItem>().not.toBeNever()
  })
  test('ObjectItemProps', () => {
    expectTypeOf<ObjectItemProps<any>>().toBeObject()
  })
  test('ObjectMember', () => {
    expectTypeOf<ObjectMember>().not.toBeNever()
  })
  test('ObjectOptions', () => {
    expectTypeOf<ObjectOptions>().toBeObject()
  })
  test('ObjectRule', () => {
    expectTypeOf<ObjectRule>().toBeObject()
  })
  test('ObjectSchemaType', () => {
    expectTypeOf<ObjectSchemaType>().toBeObject()
  })
  test('ObjectSchemaTypeWithOptions', () => {
    expectTypeOf<ObjectSchemaTypeWithOptions>().toBeObject()
  })
  test('OnPathFocusPayload', () => {
    expectTypeOf<OnPathFocusPayload>().toBeObject()
  })
  test('PatchArg', () => {
    expectTypeOf<PatchArg>().not.toBeNever()
  })
  test('PatchEventInterface', () => {
    expectTypeOf<PatchEventInterface>().toBeObject()
  })
  test('PatchMutation', () => {
    expectTypeOf<PatchMutation>().toBeObject()
  })
  test('PatchMutationOperation', () => {
    expectTypeOf<PatchMutationOperation>().not.toBeNever()
  })
  test('PatchOperations', () => {
    expectTypeOf<PatchOperations>().toBeObject()
  })
  test('Path', () => {
    expectTypeOf<Path>().not.toBeNever()
  })
  test('PathSegment', () => {
    expectTypeOf<PathSegment>().not.toBeNever()
  })
  test('PortableTextBlock', () => {
    expectTypeOf<PortableTextBlock>().not.toBeNever()
  })
  test('PortableTextChild', () => {
    expectTypeOf<PortableTextChild>().not.toBeNever()
  })
  test('PortableTextInputProps', () => {
    expectTypeOf<PortableTextInputProps>().toBeObject()
  })
  test('PortableTextListBlock', () => {
    expectTypeOf<PortableTextListBlock>().toBeObject()
  })
  test('PortableTextMarker', () => {
    expectTypeOf<PortableTextMarker>().toBeObject()
  })
  test('PortableTextObject', () => {
    expectTypeOf<PortableTextObject>().toBeObject()
  })
  test('PortableTextPluginsProps', () => {
    expectTypeOf<PortableTextPluginsProps>().toBeObject()
  })
  test('PortableTextPreviewLayoutKey', () => {
    expectTypeOf<PortableTextPreviewLayoutKey>().not.toBeNever()
  })
  test('PortableTextSpan', () => {
    expectTypeOf<PortableTextSpan>().toBeObject()
  })
  test('PortableTextTextBlock', () => {
    expectTypeOf<PortableTextTextBlock<any>>().toBeObject()
  })
  test('PrepareViewOptions', () => {
    expectTypeOf<PrepareViewOptions>().toBeObject()
  })
  test('PreviewConfig', () => {
    expectTypeOf<PreviewConfig<any, any>>().toBeObject()
  })
  test('PreviewLayoutKey', () => {
    expectTypeOf<PreviewLayoutKey>().not.toBeNever()
  })
  test('PreviewMediaDimensions', () => {
    expectTypeOf<PreviewMediaDimensions>().toBeObject()
  })
  test('PreviewProps', () => {
    expectTypeOf<PreviewProps<any>>().toBeObject()
  })
  test('PreviewValue', () => {
    expectTypeOf<PreviewValue>().toBeObject()
  })
  test('PrimitiveFieldProps', () => {
    expectTypeOf<PrimitiveFieldProps>().not.toBeNever()
  })
  test('PrimitiveFormNode', () => {
    expectTypeOf<PrimitiveFormNode>().not.toBeNever()
  })
  test('PrimitiveInputElementProps', () => {
    expectTypeOf<PrimitiveInputElementProps>().toBeObject()
  })
  test('PrimitiveItemProps', () => {
    expectTypeOf<PrimitiveItemProps>().toBeObject()
  })
  test('Reference', () => {
    expectTypeOf<Reference>().toBeObject()
  })
  test('ReferenceBaseOptions', () => {
    expectTypeOf<ReferenceBaseOptions>().toBeObject()
  })
  test('ReferenceComponents', () => {
    expectTypeOf<ReferenceComponents>().toBeObject()
  })
  test('ReferenceDefinition', () => {
    expectTypeOf<ReferenceDefinition>().toBeObject()
  })
  test('ReferenceFilterOptions', () => {
    expectTypeOf<ReferenceFilterOptions>().not.toBeNever()
  })
  test('ReferenceFilterQueryOptions', () => {
    expectTypeOf<ReferenceFilterQueryOptions>().toBeObject()
  })
  test('ReferenceFilterResolver', () => {
    expectTypeOf<ReferenceFilterResolver>().not.toBeNever()
  })
  test('ReferenceFilterResolverContext', () => {
    expectTypeOf<ReferenceFilterResolverContext>().toBeObject()
  })
  test('ReferenceFilterResolverOptions', () => {
    expectTypeOf<ReferenceFilterResolverOptions>().toBeObject()
  })
  test('ReferenceFilterSearchOptions', () => {
    expectTypeOf<ReferenceFilterSearchOptions>().not.toBeNever()
  })
  test('ReferenceInputProps', () => {
    expectTypeOf<ReferenceInputProps>().not.toBeNever()
  })
  test('ReferenceOptions', () => {
    expectTypeOf<ReferenceOptions>().not.toBeNever()
  })
  test('ReferenceRule', () => {
    expectTypeOf<ReferenceRule>().toBeObject()
  })
  test('ReferenceSchemaType', () => {
    expectTypeOf<ReferenceSchemaType>().toBeObject()
  })
  test('ReferenceTo', () => {
    expectTypeOf<ReferenceTo>().not.toBeNever()
  })
  test('ReferenceValue', () => {
    expectTypeOf<ReferenceValue>().not.toBeNever()
  })
  test('RenderAnnotationCallback', () => {
    expectTypeOf<RenderAnnotationCallback<any>>().not.toBeNever()
  })
  test('RenderArrayOfObjectsItemCallback', () => {
    expectTypeOf<RenderArrayOfObjectsItemCallback>().not.toBeNever()
  })
  test('RenderArrayOfPrimitivesItemCallback', () => {
    expectTypeOf<RenderArrayOfPrimitivesItemCallback>().not.toBeNever()
  })
  test('RenderBlockActionsCallback', () => {
    expectTypeOf<RenderBlockActionsCallback>().not.toBeNever()
  })
  test('RenderBlockActionsProps', () => {
    expectTypeOf<RenderBlockActionsProps>().toBeObject()
  })
  test('RenderBlockCallback', () => {
    expectTypeOf<RenderBlockCallback<any>>().not.toBeNever()
  })
  test('RenderCustomMarkers', () => {
    expectTypeOf<RenderCustomMarkers>().not.toBeNever()
  })
  test('RenderFieldCallback', () => {
    expectTypeOf<RenderFieldCallback<any>>().not.toBeNever()
  })
  test('RenderInputCallback', () => {
    expectTypeOf<RenderInputCallback<any>>().not.toBeNever()
  })
  test('RenderPreviewCallback', () => {
    expectTypeOf<RenderPreviewCallback>().not.toBeNever()
  })
  test('RenderPreviewCallbackProps', () => {
    expectTypeOf<RenderPreviewCallbackProps<any>>().toBeObject()
  })
  test('Role', () => {
    expectTypeOf<Role>().toBeObject()
  })
  test('Rule', () => {
    expectTypeOf<Rule>().toBeObject()
  })
  test('RuleBuilder', () => {
    expectTypeOf<RuleBuilder<any, any>>().not.toBeNever()
  })
  test('RuleClass', () => {
    expectTypeOf<RuleClass>().toBeObject()
  })
  test('RuleDef', () => {
    expectTypeOf<RuleDef<any, any>>().toBeObject()
  })
  test('RuleSpec', () => {
    expectTypeOf<RuleSpec>().not.toBeNever()
  })
  test('RuleSpecConstraint', () => {
    expectTypeOf<RuleSpecConstraint<any>>().not.toBeNever()
  })
  test('RuleTypeConstraint', () => {
    expectTypeOf<RuleTypeConstraint>().not.toBeNever()
  })
  test('SanityCreateOptions', () => {
    expectTypeOf<SanityCreateOptions>().toBeObject()
  })
  test('SanityDocument', () => {
    expectTypeOf<SanityDocument>().toBeObject()
  })
  test('SanityDocumentLike', () => {
    expectTypeOf<SanityDocumentLike>().toBeObject()
  })
  test('Schema', () => {
    expectTypeOf<Schema>().toBeObject()
  })
  test('SchemaType', () => {
    expectTypeOf<SchemaType>().not.toBeNever()
  })
  test('SchemaTypeDefinition', () => {
    expectTypeOf<SchemaTypeDefinition<any>>().not.toBeNever()
  })
  test('SchemaValidationError', () => {
    expectTypeOf<SchemaValidationError>().toBeObject()
  })
  test('SchemaValidationProblem', () => {
    expectTypeOf<SchemaValidationProblem>().not.toBeNever()
  })
  test('SchemaValidationProblemGroup', () => {
    expectTypeOf<SchemaValidationProblemGroup>().toBeObject()
  })
  test('SchemaValidationProblemPath', () => {
    expectTypeOf<SchemaValidationProblemPath>().not.toBeNever()
  })
  test('SchemaValidationValue', () => {
    expectTypeOf<SchemaValidationValue>().not.toBeNever()
  })
  test('SchemaValidationWarning', () => {
    expectTypeOf<SchemaValidationWarning>().toBeObject()
  })
  test('SearchConfiguration', () => {
    expectTypeOf<SearchConfiguration>().toBeObject()
  })
  test('searchStrategies', () => {
    expectTypeOf<typeof searchStrategies>().not.toBeNever()
  })
  test('SearchStrategy', () => {
    expectTypeOf<SearchStrategy>().not.toBeNever()
  })
  test('SingleFieldSet', () => {
    expectTypeOf<SingleFieldSet>().toBeObject()
  })
  test('SingleMutationResult', () => {
    expectTypeOf<SingleMutationResult>().toBeObject()
  })
  test('Slug', () => {
    expectTypeOf<Slug>().toBeObject()
  })
  test('SlugComponents', () => {
    expectTypeOf<SlugComponents>().toBeObject()
  })
  test('SlugDefinition', () => {
    expectTypeOf<SlugDefinition>().toBeObject()
  })
  test('SlugifierFn', () => {
    expectTypeOf<SlugifierFn>().not.toBeNever()
  })
  test('SlugIsUniqueValidator', () => {
    expectTypeOf<SlugIsUniqueValidator>().not.toBeNever()
  })
  test('SlugOptions', () => {
    expectTypeOf<SlugOptions>().toBeObject()
  })
  test('SlugParent', () => {
    expectTypeOf<SlugParent>().not.toBeNever()
  })
  test('SlugRule', () => {
    expectTypeOf<SlugRule>().toBeObject()
  })
  test('SlugSchemaType', () => {
    expectTypeOf<SlugSchemaType>().toBeObject()
  })
  test('SlugSourceContext', () => {
    expectTypeOf<SlugSourceContext>().toBeObject()
  })
  test('SlugSourceFn', () => {
    expectTypeOf<SlugSourceFn>().not.toBeNever()
  })
  test('SlugValidationContext', () => {
    expectTypeOf<SlugValidationContext>().toBeObject()
  })
  test('SlugValue', () => {
    expectTypeOf<SlugValue>().toBeObject()
  })
  test('SortOrdering', () => {
    expectTypeOf<SortOrdering>().not.toBeNever()
  })
  test('SortOrderingItem', () => {
    expectTypeOf<SortOrderingItem>().toBeObject()
  })
  test('SpanMarksObjectField', () => {
    expectTypeOf<SpanMarksObjectField>().not.toBeNever()
  })
  test('SpanSchemaType', () => {
    expectTypeOf<SpanSchemaType>().toBeObject()
  })
  test('SpanTextObjectField', () => {
    expectTypeOf<SpanTextObjectField>().not.toBeNever()
  })
  test('StrictDefinition', () => {
    expectTypeOf<StrictDefinition>().not.toBeNever()
  })
  test('StringComponents', () => {
    expectTypeOf<StringComponents>().toBeObject()
  })
  test('StringDefinition', () => {
    expectTypeOf<StringDefinition>().toBeObject()
  })
  test('StringFieldProps', () => {
    expectTypeOf<StringFieldProps>().toBeObject()
  })
  test('StringFormNode', () => {
    expectTypeOf<StringFormNode<any>>().not.toBeNever()
  })
  test('StringInputProps', () => {
    expectTypeOf<StringInputProps<any>>().toBeObject()
  })
  test('StringOptions', () => {
    expectTypeOf<StringOptions>().toBeObject()
  })
  test('StringRule', () => {
    expectTypeOf<StringRule>().toBeObject()
  })
  test('StringSchemaType', () => {
    expectTypeOf<StringSchemaType>().toBeObject()
  })
  test('SwatchName', () => {
    expectTypeOf<SwatchName>().not.toBeNever()
  })
  test('TextComponents', () => {
    expectTypeOf<TextComponents>().toBeObject()
  })
  test('TextDefinition', () => {
    expectTypeOf<TextDefinition>().toBeObject()
  })
  test('TextOptions', () => {
    expectTypeOf<TextOptions>().toBeObject()
  })
  test('TextRule', () => {
    expectTypeOf<TextRule>().toBeObject()
  })
  test('TextSchemaType', () => {
    expectTypeOf<TextSchemaType>().toBeObject()
  })
  test('TFunction', () => {
    expectTypeOf<TFunction<any, any>>().toBeObject()
  })
  test('TitledListValue', () => {
    expectTypeOf<TitledListValue<any>>().toBeObject()
  })
  test('TransactionLogEvent', () => {
    expectTypeOf<TransactionLogEvent>().toBeObject()
  })
  test('TransactionLogEventWithEffects', () => {
    expectTypeOf<TransactionLogEventWithEffects>().toBeObject()
  })
  test('TransactionLogEventWithMutations', () => {
    expectTypeOf<TransactionLogEventWithMutations>().toBeObject()
  })
  test('TransactionLogMutation', () => {
    expectTypeOf<TransactionLogMutation>().not.toBeNever()
  })
  test('TypeAliasDefinition', () => {
    expectTypeOf<TypeAliasDefinition<any, any>>().toBeObject()
  })
  test('TypeAnnotationMismatchError', () => {
    expectTypeOf<TypeAnnotationMismatchError>().not.toBeNever()
  })
  test('typed', () => {
    expectTypeOf<typeof typed>().toBeFunction()
  })
  test('TypedObject', () => {
    expectTypeOf<TypedObject>().toBeObject()
  })
  test('TypeReference', () => {
    expectTypeOf<TypeReference>().toBeObject()
  })
  test('UndeclaredMembersError', () => {
    expectTypeOf<UndeclaredMembersError>().not.toBeNever()
  })
  test('Uploader', () => {
    expectTypeOf<Uploader<any>>().not.toBeNever()
  })
  test('UploaderResolver', () => {
    expectTypeOf<UploaderResolver<any>>().not.toBeNever()
  })
  test('UploadEvent', () => {
    expectTypeOf<UploadEvent>().toBeObject()
  })
  test('UploadOptions', () => {
    expectTypeOf<UploadOptions>().not.toBeNever()
  })
  test('UploadProgressEvent', () => {
    expectTypeOf<UploadProgressEvent>().not.toBeNever()
  })
  test('UploadState', () => {
    expectTypeOf<UploadState>().toBeObject()
  })
  test('UriValidationOptions', () => {
    expectTypeOf<UriValidationOptions>().toBeObject()
  })
  test('UrlComponents', () => {
    expectTypeOf<UrlComponents>().toBeObject()
  })
  test('UrlDefinition', () => {
    expectTypeOf<UrlDefinition>().toBeObject()
  })
  test('UrlOptions', () => {
    expectTypeOf<UrlOptions>().toBeObject()
  })
  test('UrlRule', () => {
    expectTypeOf<UrlRule>().toBeObject()
  })
  test('User', () => {
    expectTypeOf<User>().toBeObject()
  })
  test('ValidationBuilder', () => {
    expectTypeOf<ValidationBuilder<any, any>>().not.toBeNever()
  })
  test('ValidationContext', () => {
    expectTypeOf<ValidationContext>().toBeObject()
  })
  test('ValidationError', () => {
    expectTypeOf<ValidationError>().toBeObject()
  })
  test('ValidationErrorClass', () => {
    expectTypeOf<ValidationErrorClass>().toBeObject()
  })
  test('ValidationErrorOptions', () => {
    expectTypeOf<ValidationErrorOptions>().toBeObject()
  })
  test('ValidationMarker', () => {
    expectTypeOf<ValidationMarker>().toBeObject()
  })
  test('Validator', () => {
    expectTypeOf<Validator<any, any>>().not.toBeNever()
  })
  test('Validators', () => {
    expectTypeOf<Validators>().not.toBeNever()
  })
  test('WeakCrossDatasetReferenceValue', () => {
    expectTypeOf<WeakCrossDatasetReferenceValue>().toBeObject()
  })
  test('WeakGlobalDocumentReferenceValue', () => {
    expectTypeOf<WeakGlobalDocumentReferenceValue>().toBeObject()
  })
  test('WeakReference', () => {
    expectTypeOf<WeakReference>().toBeObject()
  })
  test('WidenInitialValue', () => {
    expectTypeOf<WidenInitialValue>().toBeObject()
  })
  test('WidenValidation', () => {
    expectTypeOf<WidenValidation>().toBeObject()
  })
})
