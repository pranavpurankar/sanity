name: eFPS Test
permissions:
  pull-requests: write # for comment
  statuses: write
  contents: read

on:
  deployment_status:
  workflow_dispatch:
    inputs:
      reference_tag:
        description: "npm reference tag for comparison"
        required: true
        default: "latest"
      enable_profiler:
        description: "Enable profiler"
        required: true
        type: boolean
        default: false
      record_video:
        description: "Record video"
        required: true
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}-${{ github.event.deployment_status.environment }}
  cancel-in-progress: true

jobs:
  get-vercel-url:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    if: github.event.deployment_status.state == 'success' && github.event.deployment_status.environment == 'Preview – efps'
    env:
      STATUS_CONTEXT: "efps-test/getting-vercel-url"
      TARGET_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/job/${{ job.check_run_id }}
    outputs:
      deploy_url: ${{ github.event.deployment_status.target_url }}
    steps:
      - name: Set getting URL status
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.deployment_status.deployment.sha || github.sha }}',
              state: 'pending',
              context: process.env.STATUS_CONTEXT,
              description: 'Getting Vercel deployment URL…',
              target_url: process.env.TARGET_URL
            });

      - name: Debug deployment event
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Deployment status state: ${{ github.event.deployment_status.state }}"
          echo "Deployment status environment: ${{ github.event.deployment_status.environment }}"
          echo "Target URL: ${{ github.event.deployment_status.target_url }}"
      - name: Set deploy URL
        run: echo "Deploy URL is ${{ github.event.deployment_status.target_url }}"

      - name: Mark getting URL status success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.deployment_status.deployment.sha || github.sha }}',
              state: 'success',
              context: process.env.STATUS_CONTEXT,
              description: 'Vercel URL retrieved ✅',
              target_url: process.env.TARGET_URL
            });

      - name: Mark getting URL status failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.deployment_status.deployment.sha || github.sha }}',
              state: 'failure',
              context: process.env.STATUS_CONTEXT,
              description: 'Failed to get Vercel URL ❌',
              target_url: process.env.TARGET_URL
            });
  efps-test:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs: [get-vercel-url]
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
      DEPLOY_URL: ${{ needs.get-vercel-url.outputs.deploy_url }}
      STATUS_CONTEXT: efps-test/shard-${{ matrix.shardIndex }}
      TARGET_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/job/${{ job.check_run_id }}
    strategy:
      fail-fast: false
      matrix:
        # Add more shards here if needed
        shardIndex: [1, 2, 3]
        shardTotal: [3]
    steps:
      - uses: actions/checkout@v5
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v5
        with:
          node-version: lts/*

      - name: Set shard running status
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.deployment_status.deployment.sha || github.sha }}',
              state: 'pending',
              context: process.env.STATUS_CONTEXT,
              description: 'Running eFPS shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }}…',
              target_url: process.env.TARGET_URL
            });

      - name: Add PR comment placeholder
        uses: thollander/actions-comment-pull-request@24bffb9b452ba05a4f3f77933840a6a841d1b32b # v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          comment-tag: "efps-report"
          message: |
            ### ⚡️ Editor Performance Report

            Deploying studio and running performance tests…

      - name: Install project dependencies
        run: pnpm install

      - name: Update PR comment with deployed URL
        uses: thollander/actions-comment-pull-request@24bffb9b452ba05a4f3f77933840a6a841d1b32b # v3
        if: ${{ github.event_name == 'pull_request' }}
        with:
          comment-tag: "efps-report"
          message: |
            ### ⚡️ Editor Performance Report

            Testing against: [${{ needs.get-vercel-url.outputs.deploy_url }}](${{ needs.get-vercel-url.outputs.deploy_url }})

            Running performance tests…

      - name: Store Playwright's Version
        id: playwright-version
        run: |
          PLAYWRIGHT_VERSION=$(npx playwright --version | sed 's/Version //')
          echo "Playwright's Version: $PLAYWRIGHT_VERSION"
          echo "version=${PLAYWRIGHT_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Cache Playwright Browsers for Playwright's Version
        id: cache-playwright-browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ steps.playwright-version.outputs.version }}-playwright-browsers

      - name: Install Playwright Browsers
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Run eFPS tests
        env:
          VITE_PERF_EFPS_PROJECT_ID: ${{ vars.PERF_EFPS_PROJECT_ID_TEST }}
          VITE_PERF_EFPS_DATASET: ${{ vars.PERF_EFPS_DATASET_TEST }}
          PERF_EFPS_SANITY_TOKEN: ${{ secrets.PERF_EFPS_SANITY_TOKEN_TEST }}
          REFERENCE_TAG: ${{ github.event.inputs.reference_tag || 'latest' }}
          ENABLE_PROFILER: ${{ github.event.inputs.enable_profiler || false }}
          RECORD_VIDEO: ${{ github.event.inputs.record_video || false }}
          STUDIO_URL: ${{ github.event.deployment_status.target_url }}
        run: pnpm efps:test -- -- --shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: efps-report-${{ matrix.shardIndex }}
          path: ${{ github.workspace }}/dev/efps/results/
          retention-days: 30

      - name: Mark shard status success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.deployment_status.deployment.sha || github.sha }}',
              state: 'success',
              context: process.env.STATUS_CONTEXT,
              description: 'eFPS shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }} passed ✅',
              target_url: process.env.TARGET_URL
            });

      - name: Mark shard status failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.deployment_status.deployment.sha || github.sha }}',
              state: 'failure',
              context: process.env.STATUS_CONTEXT,
              description: 'eFPS shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }} failed ❌',
              target_url: process.env.TARGET_URL
            });

  merge-reports:
    needs: [efps-test]
    runs-on: ubuntu-latest
    env:
      STATUS_CONTEXT: "efps-test/merge-reports"
      TARGET_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/job/${{ job.check_run_id }}
    steps:
      - name: Set merging reports status
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.deployment_status.deployment.sha || github.sha }}',
              state: 'pending',
              context: process.env.STATUS_CONTEXT,
              description: 'Merging eFPS test reports…',
              target_url: process.env.TARGET_URL
            });

      - uses: actions/checkout@v5
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v5
        with:
          node-version: lts/*

      - name: remove node_modules in folder efps
        run: rm -rf ./dev/efps/node_modules && rm -rf pnpm-lock.yaml

      - name: Install project dependencies
        run: pnpm install

      - name: Download blob reports from Github Actions Artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: efps-report-*
          merge-multiple: true
          path: dev/efps/results

      - name: Write report
        if: needs.efps-test.result == 'success'
        run: pnpm efps:write:report

      - name: PR comment with report
        uses: thollander/actions-comment-pull-request@24bffb9b452ba05a4f3f77933840a6a841d1b32b # v3
        if: needs.efps-test.result == 'success' && github.event_name == 'pull_request'
        with:
          comment-tag: "efps-report"
          file-path: ${{ github.workspace }}/dev/efps/results/benchmark-results.md

      - name: Mark merge reports status success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.deployment_status.deployment.sha || github.sha }}',
              state: 'success',
              context: process.env.STATUS_CONTEXT,
              description: 'eFPS reports merged and posted ✅',
              target_url: process.env.TARGET_URL
            });

      - name: Mark merge reports status failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.deployment_status.deployment.sha || github.sha }}',
              state: 'failure',
              context: process.env.STATUS_CONTEXT,
              description: 'Failed to merge eFPS reports ❌',
              target_url: process.env.TARGET_URL
            });
